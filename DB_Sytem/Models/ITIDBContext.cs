// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DB_Sytem.Models;

public partial class ITIDBContext : DbContext
{
    public ITIDBContext()
    {
    }

    public ITIDBContext(DbContextOptions<ITIDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<branche> branches { get; set; }

    public virtual DbSet<course> courses { get; set; }

    public virtual DbSet<course_topic> course_topics { get; set; }

    public virtual DbSet<department> departments { get; set; }

    public virtual DbSet<exam> exams { get; set; }
    // public virtual DbSet<exam_question> exam_question { get; set; }
    public virtual DbSet<ins_course_dept> ins_course_depts { get; set; }

    public virtual DbSet<instructor> instructors { get; set; }

    public virtual DbSet<question> questions { get; set; }

    public virtual DbSet<question_option> question_options { get; set; }

    public virtual DbSet<st_answer> st_answers { get; set; }

    public virtual DbSet<st_exam> st_exams { get; set; }

    public virtual DbSet<student> students { get; set; }

    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.EnableSensitiveDataLogging();

        optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=ITIFinalDBV2;Integrated Security=True;TrustServerCertificate=True");


    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Arabic_CI_AS");

        modelBuilder.Entity<branche>(entity =>
        {
            entity.HasKey(e => e.branch_ID).HasName("PK_branches");

            entity.ToTable("branche");

            entity.Property(e => e.location)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();

            entity.HasMany(d => d.depts).WithMany(p => p.branches)
                .UsingEntity<Dictionary<string, object>>(
                    "branch_dept",
                    r => r.HasOne<department>().WithMany()
                        .HasForeignKey("dept_ID")
                        .HasConstraintName("FK_branch_dept_department"),
                    l => l.HasOne<branche>().WithMany()
                        .HasForeignKey("branch_ID")
                        .HasConstraintName("FK_branch_dept_branche"),
                    j =>
                    {
                        j.HasKey("branch_ID", "dept_ID");
                        j.ToTable("branch_dept");
                    });
        });

        modelBuilder.Entity<course>(entity =>
        {
            entity.HasKey(e => e.course_ID);

            entity.ToTable("course");

            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
        });

        modelBuilder.Entity<course_topic>(entity =>
        {
            entity.HasKey(e => new { e.course_ID, e.topic });

            entity.ToTable("course_topic");

            entity.Property(e => e.topic)
                .HasMaxLength(100)
                .IsFixedLength();

            entity.HasOne(d => d.course).WithMany(p => p.course_topics)
                .HasForeignKey(d => d.course_ID)
                .HasConstraintName("FK_course_topic_course");
        });

        modelBuilder.Entity<department>(entity =>
        {
            entity.HasKey(e => e.dept_ID).HasName("PK_departments");

            entity.ToTable("department");

            entity.Property(e => e.hire_date).HasColumnType("date");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();

            entity.HasOne(d => d.manger).WithMany(p => p.departments)
                .HasForeignKey(d => d.manger_ID)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_department_instructor");

            entity.HasMany(d => d.ins).WithMany(p => p.depts)
                .UsingEntity<Dictionary<string, object>>(
                    "dept_in",
                    r => r.HasOne<instructor>().WithMany()
                        .HasForeignKey("ins_ID")
                        .HasConstraintName("FK_dept_ins_instructor"),
                    l => l.HasOne<department>().WithMany()
                        .HasForeignKey("dept_ID")
                        .HasConstraintName("FK_dept_ins_department"),
                    j =>
                    {
                        j.HasKey("dept_ID", "ins_ID");
                        j.ToTable("dept_ins");
                    });
        });

        modelBuilder.Entity<exam>(entity =>
        {
            entity.HasKey(e => e.exam_ID);

            entity.ToTable("exam");

            entity.Property(e => e.date).HasColumnType("date");

            entity.HasOne(d => d.course).WithMany(p => p.exams)
                .HasForeignKey(d => d.course_ID)
                .HasConstraintName("FK_exam_course");

            entity.HasMany(d => d.quesations).WithMany(p => p.exams)
                .UsingEntity<Dictionary<string, object>>(
                    "exam_question",
                    r => r.HasOne<question>().WithMany()
                        .HasForeignKey("quesation_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_exam_question_question"),
                    l => l.HasOne<exam>().WithMany()
                        .HasForeignKey("exam_ID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_exam_question_exam"),
                    j =>
                    {
                        j.HasKey("exam_ID", "quesation_ID");
                        j.ToTable("exam_question");
                    });
        });

        modelBuilder.Entity<ins_course_dept>(entity =>
        {
            entity.HasKey(e => new { e.ins_ID, e.dept_ID, e.course_ID });

            entity.ToTable("ins_course_dept");

            entity.HasOne(d => d.course).WithMany(p => p.ins_course_depts)
                .HasForeignKey(d => d.course_ID)
                .HasConstraintName("FK_ins_course_dept_course");

            entity.HasOne(d => d.dept).WithMany(p => p.ins_course_depts)
                .HasForeignKey(d => d.dept_ID)
                .HasConstraintName("FK_ins_course_dept_department");

            entity.HasOne(d => d.ins).WithMany(p => p.ins_course_depts)
                .HasForeignKey(d => d.ins_ID)
                .HasConstraintName("FK_ins_course_dept_instructor");
        });

        modelBuilder.Entity<instructor>(entity =>
        {
            entity.HasKey(e => e.ins_ID);

            entity.ToTable("instructor");

            entity.Property(e => e.Degree)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.fname)
                .IsRequired()
                .HasMaxLength(30)
                .IsFixedLength();
            entity.Property(e => e.hire_date).HasColumnType("date");
            entity.Property(e => e.lname)
                .HasMaxLength(30)
                .IsFixedLength();
            entity.Property(e => e.salary).HasColumnType("money");
        });

        modelBuilder.Entity<question>(entity =>
        {
            entity.HasKey(e => e.question_ID);

            entity.ToTable("question");

            entity.Property(e => e.correct_ans).IsRequired();
            entity.Property(e => e.text).IsRequired();
            entity.Property(e => e.type)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();

            entity.HasOne(d => d.course).WithMany(p => p.questions)
                .HasForeignKey(d => d.course_ID)
                .HasConstraintName("FK_question_course");
        });

        modelBuilder.Entity<question_option>(entity =>
        {
            entity.HasKey(e => e.question_ID);

            entity.ToTable("question_option");

            entity.Property(e => e.question_ID).ValueGeneratedNever();

            entity.HasOne(d => d.question).WithOne(p => p.question_option)
                .HasForeignKey<question_option>(d => d.question_ID)
                .HasConstraintName("FK_question_option_question");
        });

        modelBuilder.Entity<st_answer>(entity =>
        {
            entity.HasKey(e => new { e.exam_ID, e.st_ID, e.question_ID }).HasName("PK_st_answer_1");

            entity.ToTable("st_answer");

            entity.HasOne(d => d.exam).WithMany(p => p.st_answers)
                .HasForeignKey(d => d.exam_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_st_answer_exam");

            entity.HasOne(d => d.question).WithMany(p => p.st_answers)
                .HasForeignKey(d => d.question_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_st_answer_question");

            entity.HasOne(d => d.st).WithMany(p => p.st_answers)
                .HasForeignKey(d => d.st_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_st_answer_student");
        });

        modelBuilder.Entity<st_exam>(entity =>
        {
            entity.HasKey(e => new { e.st_ID, e.exam_ID });

            entity.ToTable("st_exam");

            entity.HasOne(d => d.exam).WithMany(p => p.st_exams)
                .HasForeignKey(d => d.exam_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_st_exam_exam");

            entity.HasOne(d => d.st).WithMany(p => p.st_exams)
                .HasForeignKey(d => d.st_ID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_st_exam_student");
        });

        modelBuilder.Entity<student>(entity =>
        {
            entity.HasKey(e => e.st_ID);

            entity.ToTable("student");

            entity.Property(e => e.address)
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.fname)
                .IsRequired()
                .HasMaxLength(50)
                .IsFixedLength();
            entity.Property(e => e.lname)
                .HasMaxLength(50)
                .IsFixedLength();

            entity.HasOne(d => d.dept).WithMany(p => p.students)
                .HasForeignKey(d => d.dept_ID)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_student_department");

            entity.HasMany(d => d.courses).WithMany(p => p.sts)
                .UsingEntity<Dictionary<string, object>>(
                    "st_course",
                    r => r.HasOne<course>().WithMany()
                        .HasForeignKey("course_ID")
                        .HasConstraintName("FK_st_course_course"),
                    l => l.HasOne<student>().WithMany()
                        .HasForeignKey("st_ID")
                        .HasConstraintName("FK_st_course_student"),
                    j =>
                    {
                        j.HasKey("st_ID", "course_ID");
                        j.ToTable("st_course");
                    });
        });

        OnModelCreatingGeneratedProcedures(modelBuilder);
        OnModelCreatingGeneratedFunctions(modelBuilder);
        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}